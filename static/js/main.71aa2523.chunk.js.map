{"version":3,"sources":["components/Cell/Cell.js","components/Board/Board.js","components/ResultModal/ResultModal.js","Utils/WinnerCalculator.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","isTie","winner","cellClasses","classNames","cell","canHighlight","tie","bl0","bl_0","br0","br_0","bt0","bt_0","bb0","bb_0","cellContentClass","populated","value","borderClass","index","StrictMode","className","onClick","Board","cells","cellValues","map","winningCombination","indexOf","cellClicked","id","ResultModal","ResultModalClasses","isGameOver","message","onNewGameClicked","WinningLines","calculateWinner","cellvalues","noOfTrunsLeft","cellIndex","linesThatAre","a","b","c","filter","cellIndexes","newCellValues","JSON","stringify","sort","PlayerXWon","length","PlayerOWon","hasResult","undefined","Game","useState","Array","fill","setcellValues","Player1","Player2","playerValue","setPlayerValue","xIsNext","setxISNext","isPlay","setIsPlay","setIsGameOver","setWinner","setWinningCombination","setnoOfTrunsLeft","PlayerTurn","setPlayerTurn","p1Count","setP1Count","p2Count","setP2Count","tieCount","setTieCount","isCPU","setIsCPU","isMute","setIsMute","isChecked","setIsChecked","volumeclass","setvolumeclass","moveAudio","Audio","process","winAudio","lostAudio","useEffect","setTimeout","moveIndex","emptyIndexes","val","randomIndex","Math","floor","random","nextMoves","linesToWin","linesToBlock","linesToContinue","linesForFirstmove","firstIndex","cpuMoves","newNoOfTrunsLeft","calcResult","winnerName","winCount","play","onValueChange","e","target","name","window","location","reload","style","textAlign","isCellEmpty","autoComplete","onChange","maxLength","placeholder","disabled","type","checked","htmlFor","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71aa2523.chunk.js","sourcesContent":["import \"./Cell.css\";\r\nimport react from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Cell = (props) => {\r\n  let isTie = false;\r\n  if (props.winner === \"Tie\") {\r\n    isTie = true;\r\n  }\r\n  let cellClasses = classNames({\r\n    cell: true,\r\n    winner: props.canHighlight,\r\n    tie: isTie,\r\n  });\r\n  let bl0 = classNames({\r\n    bl_0: true,\r\n  });\r\n  let br0 = classNames({\r\n    br_0: true,\r\n  });\r\n  let bt0 = classNames({\r\n    bt_0: true,\r\n  });\r\n  let bb0 = classNames({\r\n    bb_0: true,\r\n  });\r\n\r\n  let cellContentClass = classNames({\r\n    \"cell-content\": true,\r\n    populated: props.value,\r\n    winner: props.canHighlight,\r\n  });\r\n\r\n  let borderClass = \"\";\r\n  if (props.index === 0) {\r\n    borderClass = cellClasses + \" \" + bl0 + \" \" + bt0;\r\n  }\r\n  if (props.index === 1) {\r\n    borderClass = cellClasses + \" \" + bt0;\r\n  }\r\n  if (props.index === 2) {\r\n    borderClass = cellClasses + \" \" + bt0 + \" \" + br0;\r\n  }\r\n  if (props.index === 3) {\r\n    borderClass = cellClasses + \" \" + bl0;\r\n  }\r\n  if (props.index === 4) {\r\n    borderClass = cellClasses;\r\n  }\r\n  if (props.index === 5) {\r\n    borderClass = cellClasses + \" \" + br0;\r\n  }\r\n  if (props.index === 6) {\r\n    borderClass = cellClasses + \" \" + bl0 + \" \" + bb0;\r\n  }\r\n  if (props.index === 7) {\r\n    borderClass = cellClasses + \" \" + bb0;\r\n  }\r\n  if (props.index === 8) {\r\n    borderClass = cellClasses + \" \" + bb0 + \" \" + br0;\r\n  }\r\n  return (\r\n    <react.StrictMode>\r\n      <button className={borderClass + \" cell-button\"} onClick={props.onClick}>\r\n        <span className={cellContentClass}>{props.value}</span>\r\n      </button>\r\n    </react.StrictMode>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import \"./Board.css\";\r\nimport react from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\n\r\nconst Board = (props) => {\r\n  const cells = props.cellValues.map((value, index) => {\r\n    const canHighlight =\r\n      props.winningCombination && props.winningCombination.indexOf(index) >= 0;\r\n    return (\r\n      <Cell\r\n        key={index}\r\n        value={value}\r\n        index={index}\r\n        canHighlight={canHighlight}\r\n        winner={props.winner}\r\n        onClick={() => props.cellClicked(index)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <react.StrictMode>\r\n      <div id=\"board\">{cells}</div>\r\n    </react.StrictMode>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import \"./ResultModal.css\";\r\nimport react from \"react\";\r\nimport classNames from \"classnames\";\r\nconst ResultModal = (props) => {\r\n  const ResultModalClasses = classNames({\r\n    \"modal-open\": props.isGameOver,\r\n  });\r\n\r\n  const message =\r\n    props.winner === \"Tie\" ? `It's a Tie!` : `${props.winner} is a Winner!`;\r\n\r\n  return (\r\n    <react.StrictMode>\r\n      <div id=\"modal-overlay\" className={ResultModalClasses}>\r\n        <div id=\"game-result-modal\">\r\n          <div id=\"result-container\">\r\n            <div id=\"winner-container\">\r\n              <span>{message}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"new-game-container\">\r\n            <button id=\"new-game-button\" onClick={props.onNewGameClicked}>\r\n              Start New Game\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </react.StrictMode>\r\n  );\r\n};\r\n\r\nexport default ResultModal;\r\n","////old logic winning matrix\r\n// const winningMatrix = {\r\n//   0: [\r\n//     [1, 2],\r\n//     [3, 6],\r\n//     [4, 8],\r\n//   ],\r\n//   1: [\r\n//     [0, 2],\r\n//     [4, 7],\r\n//   ],\r\n//   2: [\r\n//     [0, 1],\r\n//     [5, 8],\r\n//     [4, 6],\r\n//   ],\r\n//   3: [\r\n//     [0, 6],\r\n//     [4, 5],\r\n//   ],\r\n//   4: [\r\n//     [2, 6],\r\n//     [3, 5],\r\n//     [1, 7],\r\n//     [0, 8],\r\n//   ],\r\n//   5: [\r\n//     [3, 4],\r\n//     [2, 8],\r\n//   ],\r\n//   6: [\r\n//     [7, 8],\r\n//     [0, 3],\r\n//     [2, 4],\r\n//   ],\r\n//   7: [\r\n//     [6, 8],\r\n//     [1, 4],\r\n//   ],\r\n//   8: [\r\n//     [6, 7],\r\n//     [2, 5],\r\n//     [0, 4],\r\n//   ],\r\n// };\r\n\r\n//winning combinations\r\nconst WinningLines = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\n//function to calculate CPU moves\r\nexport const cpuMoves = (cellvalues) => {\r\n  const cells = cellvalues;\r\n  //find winning combo line\r\n  const linesThatAre = (a, b, c) => {\r\n    return WinningLines.filter((cellIndexes) => {\r\n      const newCellValues = cellIndexes.map((index) => cells[index]);\r\n\r\n      return (\r\n        JSON.stringify([a, b, c].sort()) ===\r\n        JSON.stringify(newCellValues.sort())\r\n      );\r\n    });\r\n  };\r\n\r\n  //try to win\r\n  const linesToWin = linesThatAre(\"O\", \"O\", \"\");\r\n  if (linesToWin.length > 0) {\r\n    const winIndex = linesToWin[0].filter((index) => cells[index] === \"\")[0];\r\n    return winIndex;\r\n  }\r\n\r\n  //try to block opponent's move\r\n  const linesToBlock = linesThatAre(\"X\", \"X\", \"\");\r\n  if (linesToBlock.length > 0) {\r\n    const blockIndex = linesToBlock[0].filter(\r\n      (index) => cells[index] === \"\"\r\n    )[0];\r\n    return blockIndex;\r\n  }\r\n\r\n  //try move for win\r\n  const linesToContinue = linesThatAre(\"O\", \"\", \"\");\r\n  if (linesToContinue.length > 0) {\r\n    const continueIndex = linesToContinue[0].filter(\r\n      (index) => cells[index] === \"\"\r\n    )[0];\r\n    return continueIndex;\r\n  }\r\n\r\n  //effective cpu first move(difficult level )\r\n  const linesForFirstmove = linesThatAre(\"X\", \"\", \"\");\r\n  if (linesForFirstmove.length > 0) {\r\n    let firstIndex = linesForFirstmove[0].filter(\r\n      (index) => cells[index] === \"\"\r\n    )[0];\r\n    if (cellvalues[4] === \"\") {\r\n      firstIndex = 4;\r\n    }\r\n    if (cellvalues[4] !== \"\" && cellvalues[0] === \"\") {\r\n      firstIndex = 0;\r\n    }\r\n    return firstIndex;\r\n  }\r\n};\r\n\r\n// function to calculate winner(returns result,winner,combination number)\r\nexport const calculateWinner = (cellvalues, noOfTrunsLeft, cellIndex) => {\r\n  const cells = cellvalues;\r\n\r\n  const linesThatAre = (a, b, c) => {\r\n    return WinningLines.filter((cellIndexes) => {\r\n      const newCellValues = cellIndexes.map((index) => cells[index]);\r\n\r\n      return (\r\n        JSON.stringify([a, b, c].sort()) ===\r\n        JSON.stringify(newCellValues.sort())\r\n      );\r\n    });\r\n  };\r\n\r\n  const PlayerXWon = linesThatAre(\"X\", \"X\", \"X\").length > 0;\r\n  const PlayerOWon = linesThatAre(\"O\", \"O\", \"O\").length > 0;\r\n\r\n  if (PlayerXWon || PlayerOWon) {\r\n    return {\r\n      hasResult: true,\r\n      winner: cellvalues[cellIndex],\r\n      winningCombination: PlayerXWon\r\n        ? linesThatAre(\"X\", \"X\", \"X\")[0]\r\n        : linesThatAre(\"O\", \"O\", \"O\")[0],\r\n    };\r\n  }\r\n  if (noOfTrunsLeft === 0) {\r\n    return {\r\n      hasResult: true,\r\n      winner: \"Tie\",\r\n      winningCombination: [],\r\n    };\r\n  }\r\n\r\n  return {\r\n    hasResult: false,\r\n    winner: undefined,\r\n    winningCombination: [],\r\n  };\r\n\r\n  //older logic\r\n  //const winningRanges = winningMatrix[cellIndex];\r\n  // for (let i = 0; i < winningRanges.length; i++) {\r\n  //   const currentvalue = cellvalues[cellIndex];\r\n  //   const firstOption = cellvalues[winningRanges[i][0]];\r\n  //   const secondOption = cellvalues[winningRanges[i][1]];\r\n\r\n  //   // console.log(\r\n  //   //   `currentvalue: ${currentvalue}, firstOption: ${firstOption}, secondOption: ${secondOption} `\r\n  //   // );\r\n\r\n  //   if (currentvalue === firstOption && firstOption === secondOption) {\r\n  //     return {\r\n  //       hasResult: true,\r\n  //       winner: currentvalue,\r\n  //       winningCombination: [\r\n  //         cellIndex,\r\n  //         winningRanges[i][0],\r\n  //         winningRanges[i][1],\r\n  //       ],\r\n  //     };\r\n  //   }\r\n  // }\r\n\r\n  // if (noOfTrunsLeft === 0) {\r\n  //   return {\r\n  //     hasResult: true,\r\n  //     winner: \"Tie\",\r\n  //     winningCombination: [],\r\n  //   };\r\n  // }\r\n\r\n  // return {\r\n  //   hasResult: false,\r\n  //   winner: undefined,\r\n  //   winningCombination: [],\r\n  // };\r\n};\r\n","import \"./Game.css\";\r\nimport react, { useEffect, useState } from \"react\";\r\nimport Board from \"../Board/Board\";\r\nimport ResultModal from \"../ResultModal/ResultModal\";\r\nimport { calculateWinner, cpuMoves } from \"../../Utils/WinnerCalculator\";\r\n\r\nconst Game = () => {\r\n  const [cellValues, setcellValues] = useState(Array(9).fill(\"\"));\r\n  const initialvalues = {\r\n    Player1: \"Player 1\",\r\n    Player2: \"Player 2\",\r\n  };\r\n  const [playerValue, setPlayerValue] = useState(initialvalues); //player names\r\n  const [xIsNext, setxISNext] = useState(true); //check the turn of X\r\n  const [isPlay, setIsPlay] = useState(false); //to confirm playing choices\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const isCellEmpty = (cellIndex) => cellValues[cellIndex] === \"\";\r\n  const [winner, setWinner] = useState();\r\n  const [winningCombination, setWinningCombination] = useState();\r\n  const [noOfTrunsLeft, setnoOfTrunsLeft] = useState(9);\r\n  const [PlayerTurn, setPlayerTurn] = useState(playerValue.Player1); //to display next player's turn\r\n  const [p1Count, setP1Count] = useState(0); //player1 count\r\n  const [p2Count, setP2Count] = useState(0); //player2 count\r\n  const [tieCount, setTieCount] = useState(0); //tie count\r\n  const [isCPU, setIsCPU] = useState(false); // enable player vs cpu (if true)\r\n  const [isMute, setIsMute] = useState(false); //mute sounds\r\n  const [isChecked, setIsChecked] = useState(false); //cpu checkbox checked or not\r\n  const [volumeclass, setvolumeclass] = useState(\"fas fa-volume-up\"); //set fa icon volume class\r\n  var moveAudio = new Audio(process.env.PUBLIC_URL + \"/sounds/jump.wav\"); //moves sfx\r\n  var winAudio = new Audio(process.env.PUBLIC_URL + \"/sounds/win.wav\"); //win sfx\r\n  var lostAudio = new Audio(process.env.PUBLIC_URL + \"/sounds/lost.wav\"); //tie sfx\r\n\r\n  const restartGame = () => {\r\n    setxISNext(true);\r\n    setcellValues([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n    setIsGameOver(false);\r\n    setnoOfTrunsLeft(9);\r\n    setWinner(undefined);\r\n    setWinningCombination([]);\r\n    setPlayerTurn(playerValue.Player1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isCPU) {\r\n      setTimeout(function () {\r\n        //check cpu turn by filled cells % 2\r\n        //1 is cpu turn, 0 is user turn\r\n        //(odd number mod by 2 always gives value 1)\r\n        const isCPUTurn =\r\n          cellValues.filter((cells) => cells !== \"\").length % 2 === 1;\r\n\r\n        if (isCPUTurn && !winner) {\r\n          const emptyIndexes = cellValues\r\n            .map((cell, index) => (cell === \"\" ? index : null))\r\n            .filter((val) => val !== null);\r\n\r\n          //random number generation\r\n          const randomIndex =\r\n            emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)];\r\n\r\n          const newCellValues = [...cellValues];\r\n          // cpuMoves(newCellValues);\r\n\r\n          const nextMoves = cpuMoves(newCellValues);\r\n          //const moveIndex = nextMoves ? undefined : randomIndex;\r\n          let moveIndex;\r\n          if (nextMoves === undefined) {\r\n            moveIndex = randomIndex;\r\n          } else {\r\n            moveIndex = nextMoves;\r\n          }\r\n          //assign value to cell\r\n          newCellValues[moveIndex] = \"O\";\r\n\r\n          const newNoOfTrunsLeft = noOfTrunsLeft - 1;\r\n          //Calculate result\r\n          const calcResult = calculateWinner(\r\n            newCellValues,\r\n            newNoOfTrunsLeft,\r\n            moveIndex\r\n          );\r\n\r\n          let winnerName = \"\";\r\n          let winCount = 0;\r\n          if (calcResult.winner === \"X\") {\r\n            winnerName = playerValue.Player1;\r\n            winCount = p1Count;\r\n            winCount = winCount + 1;\r\n            setP1Count(winCount);\r\n            if (!isMute) {\r\n              winAudio.play();\r\n            }\r\n          } else if (calcResult.winner === \"O\") {\r\n            winnerName = playerValue.Player2;\r\n            winCount = p2Count;\r\n            winCount = winCount + 1;\r\n            setP2Count(winCount);\r\n            if (!isMute) {\r\n              winAudio.play();\r\n            }\r\n          } else if (calcResult.winner === \"Tie\") {\r\n            winnerName = \"Tie\";\r\n            winCount = tieCount;\r\n            winCount = winCount + 1;\r\n            setTieCount(winCount);\r\n            if (!isMute) {\r\n              lostAudio.play();\r\n            }\r\n          }\r\n\r\n          setxISNext(!xIsNext);\r\n          setcellValues([...newCellValues]);\r\n          setIsGameOver(calcResult.hasResult);\r\n          setnoOfTrunsLeft(newNoOfTrunsLeft);\r\n          setWinner(winnerName);\r\n          setWinningCombination(calcResult.winningCombination);\r\n          setPlayerTurn(xIsNext ? playerValue.Player2 : playerValue.Player1);\r\n          if (!isMute) {\r\n            moveAudio.play();\r\n          }\r\n        }\r\n      }, 300);\r\n    }\r\n  }, [cellValues]);\r\n\r\n  const cellClicked = (cellIndex) => {\r\n    if (isCellEmpty(cellIndex)) {\r\n      //store previous cell values\r\n      const newCellValues = [...cellValues];\r\n      //assign value to clicked cell\r\n      newCellValues[cellIndex] = xIsNext ? \"X\" : \"O\";\r\n      const newNoOfTrunsLeft = noOfTrunsLeft - 1;\r\n      //Calculate result\r\n      const calcResult = calculateWinner(\r\n        newCellValues,\r\n        newNoOfTrunsLeft,\r\n        cellIndex\r\n      );\r\n      let winnerName = \"\";\r\n      let winCount = 0;\r\n      if (calcResult.winner === \"X\") {\r\n        winnerName = playerValue.Player1;\r\n        winCount = p1Count;\r\n        winCount = winCount + 1;\r\n        setP1Count(winCount);\r\n        if (!isMute) {\r\n          winAudio.play();\r\n        }\r\n      } else if (calcResult.winner === \"O\") {\r\n        winnerName = playerValue.Player2;\r\n        winCount = p2Count;\r\n        winCount = winCount + 1;\r\n        setP2Count(winCount);\r\n        if (!isMute) {\r\n          winAudio.play();\r\n        }\r\n      } else if (calcResult.winner === \"Tie\") {\r\n        winnerName = \"Tie\";\r\n        winCount = tieCount;\r\n        winCount = winCount + 1;\r\n        setTieCount(winCount);\r\n        if (!isMute) {\r\n          lostAudio.play();\r\n        }\r\n      }\r\n\r\n      setxISNext(!xIsNext);\r\n      setcellValues(newCellValues);\r\n      setIsGameOver(calcResult.hasResult);\r\n      setnoOfTrunsLeft(newNoOfTrunsLeft);\r\n      //setWinner(calcResult.winner);\r\n      setWinner(winnerName);\r\n      setWinningCombination(calcResult.winningCombination);\r\n      setPlayerTurn(xIsNext ? playerValue.Player2 : playerValue.Player1);\r\n      if (!isMute) {\r\n        moveAudio.play();\r\n      }\r\n    }\r\n  };\r\n\r\n  //on input text chnaged\r\n  const onValueChange = (e) => {\r\n    setPlayerValue({\r\n      ...playerValue,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //checkbox changes related to cpu's turn\r\n  const handleOnChange = () => {\r\n    setIsChecked(!isChecked);\r\n    setIsCPU(!isChecked);\r\n  };\r\n\r\n  const setPlay = (e) => {\r\n    setIsPlay(true);\r\n    if (isChecked) {\r\n      setPlayerValue({\r\n        Player1: playerValue.Player1,\r\n        Player2: \"CPU\",\r\n      });\r\n    }\r\n    //reassign player turn\r\n    setPlayerTurn(playerValue.Player1);\r\n  };\r\n\r\n  //mute all sounds\r\n  const muteSound = () => {\r\n    setIsMute(isMute ? false : true);\r\n    setvolumeclass(isMute ? \"fas fa-volume-up\" : \"fas fa-volume-mute\");\r\n  };\r\n\r\n  if (!isPlay) {\r\n    return (\r\n      <>\r\n        <form autoComplete=\"off\" className=\"form\">\r\n          <h1>Tic Tac Toe</h1>\r\n          <input\r\n            onChange={(e) => onValueChange(e)}\r\n            className=\"input\"\r\n            maxLength=\"10\"\r\n            name=\"Player1\"\r\n            placeholder=\"Enter Player 1 Name\"\r\n          />\r\n          <input\r\n            onChange={(e) => onValueChange(e)}\r\n            className=\"input\"\r\n            maxLength=\"10\"\r\n            name=\"Player2\"\r\n            disabled={isChecked}\r\n            placeholder=\"Enter Player 2 Name\"\r\n          />\r\n\r\n          <div className=\"row-h\">\r\n            <div className=\"col-2\">\r\n              <input\r\n                id=\"checkbox\"\r\n                type=\"checkbox\"\r\n                checked={isChecked}\r\n                onChange={() => handleOnChange()}\r\n              />\r\n              <label htmlFor=\"checkbox\"></label>\r\n            </div>\r\n            <div className=\"col-10\">\r\n              <button\r\n                className=\"button\"\r\n                style={{ width: \"80%\" }}\r\n                type=\"submit\"\r\n                onClick={(e) => setPlay(e)}\r\n              >\r\n                Let's Play\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <react.StrictMode>\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"column\"></div>\r\n          <div className=\"column\">\r\n            <h1>Tic Tac Toe</h1>\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className=\"icon-column\">\r\n              <p>\r\n                <i className={volumeclass} onClick={() => muteSound()}></i>\r\n              </p>\r\n            </div>\r\n            <div className=\"icon-column\">\r\n              <p>\r\n                <i\r\n                  className=\"fas fa-redo-alt\"\r\n                  onClick={() => window.location.reload()}\r\n                ></i>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"game\" className=\"game\">\r\n        <div className=\"row\">\r\n          <div className=\"column\" style={{ textAlign: \"right\" }}>\r\n            <h3>{playerValue.Player1} (X)</h3>\r\n            <p>{p1Count}</p>\r\n          </div>\r\n          <div className=\"column\" style={{ textAlign: \"center\" }}>\r\n            <h3>Tie</h3>\r\n            <p>{tieCount}</p>\r\n          </div>\r\n          <div className=\"column\" style={{ textAlign: \"left\" }}>\r\n            <h3>{playerValue.Player2} (O)</h3>\r\n            <p>{p2Count}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Board\r\n            cellValues={cellValues}\r\n            winningCombination={winningCombination}\r\n            cellClicked={cellClicked}\r\n            winner={winner}\r\n          />\r\n          <h3 style={{ textAlign: \"center\" }}>Next Turn: {PlayerTurn}</h3>\r\n        </div>\r\n      </div>\r\n      <ResultModal\r\n        isGameOver={isGameOver}\r\n        winner={winner}\r\n        onNewGameClicked={restartGame}\r\n      />\r\n    </react.StrictMode>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import react from \"react\";\nimport Game from \"./components/Game/Game\";\n\nfunction App() {\n  return (\n    <react.StrictMode>\n      <Game />\n    </react.StrictMode>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}